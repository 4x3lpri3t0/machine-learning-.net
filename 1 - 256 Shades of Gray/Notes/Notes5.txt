==================================================
Manipulating Data with Tuples and Pattern Matching
==================================================

Now that we have data, we need to find the closest image from the training set.

	let manhattanDistance (pixels1,pixels2) =
		Array.zip pixels1 pixels2
		|> Array.map (fun (x,y) -> abs (x-y))
		|> Array.sum

Here we are using another central feature of F#: the combination of tuples and pattern matching.

Tuples exist in C# as well, but the lack of pattern matching in the language really cripples their usefulness,
which is quite unfortunate, because it’s a deadly combination for data manipulation.

How pattern matching works on tuples:

	let x = "Hello", 42 // create a tuple with 2 elements
	let (a, b) = x // unpack the two elements of x by pattern matching
	printfn "%s, %i" a b
	printfn "%s, %i" (fst x) (snd x)

Comma typically indicates a tuple, so watch out for this in F# code, as this can be slightly confusing.

Note the use of the wildcard _ below, which means “ignore the element in 2nd position”:
	
	let y = 1,2,3,4
	let (c,_,d,e) = y
	printfn "%i, %i, %i" c d e

Let’s see how this works in the manhattanDistance function. We take the two arrays of pixels (the images)
and apply Array.zip, creating a single array of tuples, where elements of the same index are paired up
together. Example:

let array1 = [| "A";"B";"C" |]
let array2 = [| 1 .. 3 |]
let zipped = Array.zip array1 array2

Running this in FSI should produce the following output:

val zipped : (string * int) [] = [|("A", 1); ("B", 2); ("C", 3)|]

So what the Manhattan distance function does is take two arrays, pair up corresponding pixels, and for
each pair it computes the absolute value of their difference and then sums them all up.

=============================================
Training and Evaluating a Classifier Function
=============================================

minBy : find the smallest element in an array, using any arbitrary function we want to compare items to each other.